"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const s=t=>btoa(String.fromCharCode(...new Uint8Array(t))),c=t=>{const e=atob(t),r=e.length,n=new Uint8Array(r);for(let a=0;a<r;a++)n[a]=e.charCodeAt(a);return n.buffer},o=async()=>crypto.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},!1,["deriveKey","deriveBits"]),y=async()=>crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]),u=async t=>{const e=await crypto.subtle.exportKey("spki",t);return s(e)},p=async t=>{const e=await crypto.subtle.exportKey("spki",t);return s(e)},d=async t=>{const e=c(t);return crypto.subtle.importKey("spki",e,{name:"ECDH",namedCurve:"P-256"},!0,[])},l=async t=>{const e=c(t);return crypto.subtle.importKey("spki",e,{name:"ECDSA",namedCurve:"P-256"},!0,["verify"])},b=async(t,e)=>{const r=await crypto.subtle.deriveBits({name:"ECDH",namedCurve:"P-256",public:e},t,256);return crypto.subtle.importKey("raw",r,{name:"AES-GCM",length:256},!0,["encrypt","decrypt"])},m=async(t,e)=>{const r=await crypto.subtle.exportKey("spki",e),n=await crypto.subtle.sign({name:"ECDSA",hash:{name:"SHA-256"}},t,r);return s(n)},f=async(t,e,r)=>{const n=await crypto.subtle.exportKey("spki",e),a=c(r);return crypto.subtle.verify({name:"ECDSA",hash:{name:"SHA-256"}},t,a,n)},g=async(t,e)=>{const r=crypto.getRandomValues(new Uint8Array(12)),n=new TextEncoder().encode(e),a=await crypto.subtle.encrypt({name:"AES-GCM",iv:r},t,n);return{iv:s(r.buffer),ciphertext:s(a)}},K=async(t,e,r)=>{const n=c(e),a=c(r),i=await crypto.subtle.decrypt({name:"AES-GCM",iv:n},t,a);return new TextDecoder().decode(i)},w=async()=>{const t=await o(),e=await y(),r=await u(t.publicKey),n=await p(e.publicKey),a=await m(e.privateKey,t.publicKey);return{payload:{ecdhPublicKey:r,ecdsaPublicKey:n,signature:a},keys:[t.privateKey,e.privateKey]}},v=async(t,e)=>{const r=await d(e.ecdhPublicKey),n=await l(e.ecdsaPublicKey);if(!await f(n,r,e.signature))throw new Error("Remote key signature is invalid.");return await b(t,r)},S=(t,e)=>g(t,e),h=(t,e)=>K(t,e.iv,e.ciphertext),C=()=>({generateKeyPair:o,generateSigningKeys:y,exportPublicKeyBase64:u,exportSigningPublicKeyBase64:p,importRemotePublicKeyBase64:d,importRemoteSigningPublicKeyBase64:l,deriveSharedSecret:b,signPublicKey:m,verifySignature:f,encryptData:g,decryptData:K,generateLocalAuthPayload:w,deriveSecretFromRemotePayload:v,encryptMessage:S,decryptMessage:h});exports.useDiffieHellman=C;
